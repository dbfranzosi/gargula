with h5py.File('./data/'+filename, 'a') as hf:

            y_gen, y_traits, y_actions = self.get_indicators()
            
            #print(y_gen)            
            #hf.require_dataset('genes', shape=(0, genes.shape[0]), dtype='float64', chunks=True, maxshape=(None, genes.shape[0]))
            if (list(hf.keys()) == []):
                genes = hf.create_group("genes")
                traits = hf.create_group("traits")
                actions = hf.create_group("actions")

                for k, v in y_gen.items():
                    print(v)
                    print(v.shape)                    
                    genes.create_dataset(k, data=v, compression="gzip", chunks=True, maxshape=(None, 1))
            
            else:
                genes = hf['genes']
                print(list(genes.keys()))
            #     hf['genes'].resize((hf['genes'].shape[0] + genes.shape[0]), axis=0)
            #     hf['genes'][-genes.shape[0]:] = genes

            print(list(hf.keys()))
            # print("Genes dataset has shape {}".format(hf['genes'].shape))


            # f.create_dataset('genes', data=new_data, compression="gzip", chunks=True, maxshape=(None,64,64))            
            # f.create_dataset('traits', data=new_label, compression="gzip", chunks=True, maxshape=(None,1)) 

            # f['data'].resize((f['data'].shape[0] + new_data.shape[0]), axis=0)
            # f['data'][-new_data.shape[0]:] = new_data

            # f['label'].resize((f['label'].shape[0] + new_label.shape[0]), axis=0)
            # f['label'][-new_label.shape[0]:] = new_label

        # @app.callback(Output('fig_hv', 'figure'),            
#             Output('dropdown-hv', 'options'),
#             Input('interval-component', 'n_intervals'),
#             Input('dropdown-hv', 'value'))
# def update_hv_graph(n, hv_sel):

#     raise PreventUpdate
#     lst_ids = gargalo.get_list_ids()
#     #print(lst_ids)
#     if hv_sel not in lst_ids:    
#         raise PreventUpdate 
    
#     #print('hv_sel=', hv_sel)    
#     hv = gargalo.hvs[hv_sel]    
#     genes = hv.get_genes()
#     traits = hv.genes.phenotype.traits
#     y_actions = hv.history.get_indicators()
#     print('y_actions=', y_actions)

#     fig_hv = make_subplots(rows=1, cols=2, 
#                 subplot_titles=["gen values", "", "trait values", "Nr of actions"])
#     fig_hv.add_trace(go.Bar(y=genes, showlegend=False), row=1, col=1)
#     fig_hv.add_trace(go.Bar(x=list(traits.values()), y=list(traits.keys()), showlegend=False, orientation='h'), row=1, col=2)        
#     # for action in ACTIONS:                 
#     #     fig_hv.add_trace(go.Scatter(y=y_actions[action], mode="lines", name=action), row=2, col=1)     
    
#     return fig_hv, lst_ids  


        if (fromfile is not None):
            # ignore all arguments but group
            with open(fromfile, 'rb') as f:
                self = pickle.load(f)

            self.id = id_last
            id_last += 1
            self.group = group
            group.hvs[self.id] = self          
            self.genes = Genes(haploid_father,haploid_mother)         
            self.parents = None
            self.visible = Visible(self)                
            self.action = Rest(self) 

        else:
            self.id = id_last
            id_last += 1
            self.group = group
            group.hvs[self.id] = self          
            self.genes = Genes(haploid_father,haploid_mother)         
            self.pregnant=0 
            self.age=0    
            self.generation = generation             
            if energy==0.0:
                self.energy = self.genes.phenotype.traits['energy_pool']
            else:
                self.energy = energy
            self.name = name
            self.parents = None
            self.visible = Visible(self)                
            self.action = Rest(self) 

            self.mind = GraphDQLMind(self, memory_capacity=100)
            self.history = HvHistory(self, 200)

    def save(self, filename='hv.pickle'):
        #filename = self.group.name + 'hv{self.id}.pickle'
        with open(filename, 'wb') as f:
            pickle.dump(self, f, pickle.HIGHEST_PROTOCOL)



@callback(Output('info_loadgroup', 'children'),
        Input('load_group-buttom', 'n_clicks'),
        State('load_group-list', 'value'),
        )
def load_group(n, group_list):     
    global gargalo, biology, eden

    if (len(group_list) == 0 ):
        print("Choose a group to load.")
        PreventUpdate
    elif (len(group_list) == 1):        
        group_name = group_list[0]
        print('Loading '+ group_name)
        gargalo = gargalo.load(group_name)
        biology = gargalo.biology
        eden = gargalo.home        
    else:
        print("Combining different groups into one. Not implemented yet.")
    
    # Info    
    info_group = 'Loaded '+gargalo.get_info()
    return info_group


@callback(Output('info_creategroup', 'children'),
        Input('create_group-buttom', 'n_clicks'),
        State('namegroup-input', 'value'),
        State('nrhv-input', 'value'),
        State('bios-dropdown', 'value'),        
        )
def create_group(n, name, nr, bio): 
    if (bio != "New"):
        filename = f'./data/biologies/{bio}.pickle'
        biology.load(filename)
    gargalo.name = name
    gargalo.generate_gargalo(nr)

    # Info    
    info_group = 'Created '+gargalo.get_info()
    return info_group


    def get_action(self):
        if (hasattr(self.owner.action, 'power') and hasattr(self.owner.action, 'resistance')):
            power = self.owner.action.power
            resistance = self.owner.action.resistance
        else:
            power = None
            resistance = None

        return (self.owner.action.name, self.owner.action.reward, power, resistance)

    fig_learning = make_subplots(rows=2, cols=2, 
                    subplot_titles=["Avg reward", "Age X Slope", "Age", ""])     
    fig_genetics = make_subplots(rows=1, cols=1, 
                    subplot_titles=["", "", "", ""])         

    hist, hist_hvs = {}, {}
    hist_hvs_long = {}
    info = ''    

    for name in group_sel:  
        h = load_history(name)
        hhv = load_hvs(name)

        hhv["age"] = hhv.count(axis=1)
        hhv["sum"] = hhv.sum(axis=1)        
        hhv["avg"] = hhv["sum"]/hhv["age"]
        
        hhv["slope"] = - hhv.apply(lambda x: x[0:int(x['age']/2)].sum(),axis=1)
        hhv["slope"] += hhv.apply(lambda x: x[int(x['age']/2):int(x['age'])].sum(),axis=1)
                
        print(hhv.loc[hhv["slope"]<0])
        hist_hvs_long[name] = hhv.loc[hhv[199].notna()]

        info += f'{name}: In {h.shape[0]} days {hhv.shape[0]} hvs died. {hist_hvs_long[name].shape[0]} lived more than 200 days. \n'

        fig_learning.add_trace(
            go.Bar(name='avg',
                x=hhv.index,
                y=hhv["avg"]),
            row=1, col=1)
        fig_learning.add_trace(
            go.Scatter(name='ageXslope',
                x=hhv["age"],
                y=hhv["slope"], mode="markers"),
            row=1, col=2)
        fig_learning.add_trace(
            go.Bar(name='age',
                x=hhv.index,
                y=hhv["age"]),
            row=2, col=1)
        # for action in ACTIONS:
        #     fig_learning.add_trace(
        #         go.Scatter(name=action,
        #             x=h.index,
        #             y=h[action], mode="lines"),
        #         row=2, col=2)
        
        #print(h.columns)

        for trait in TRAITS:
            fig_genetics.add_trace(
                go.Scatter(name=trait,
                    x=h.index,
                    y=h[trait], mode="lines"),
                row=1, col=1)
        